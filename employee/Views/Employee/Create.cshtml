@model employee.Models.EmployeeFormViewModel

@{
    Layout = null;
}


<div class="container mt-5">

    <form id="employeeForm" method="post">
        @Html.AntiForgeryToken()

        <input type="hidden" asp-for="Employee.EmployeeID" />
        <input type="hidden" id="expJson" value='@Html.Raw(Json.Serialize(Model.Experiences))' />


        <!-- Employee Info -->
        <div class="mb-3">
            <h4>Employee Info</h4>

            <div class="row mb-2 align-items-center">
                <div class="col-4">
                    <label asp-for="Employee.Name" class="form-label"></label>
                </div>
                <div class="col-8">
                    <input asp-for="Employee.Name" class="form-control form-control-sm" />
                    <span asp-validation-for="Employee.Name" class="text-danger"></span>
                </div>
            </div>

            <div class="row mb-2 align-items-center">
                <div class="col-4">
                    <label asp-for="Employee.Age" class="form-label"></label>
                </div>
                <div class="col-8">
                    <input asp-for="Employee.Age" class="form-control form-control-sm" />
                    <span asp-validation-for="Employee.Age" class="text-danger"></span>
                </div>
            </div>

            <div class="row mb-2 align-items-center">
                <div class="col-4">
                    <label asp-for="Employee.Gender" class="form-label"></label>
                </div>
                <div class="col-8">
                    <select asp-for="Employee.Gender" class="form-control form-control-sm">
                        <option value="">-- Select Gender --</option>
                        <option value="Male">Male</option>
                        <option value="Female">Female</option>
                        <option value="Other">Other</option>
                    </select>
                    <span asp-validation-for="Employee.Gender" class="text-danger"></span>
                </div>
            </div>

            <div class="row mb-2 align-items-center">
                <div class="col-4">
                    <label asp-for="Employee.Contact" class="form-label"></label>
                </div>
                <div class="col-8">
                    <input asp-for="Employee.Contact" class="form-control form-control-sm" />
                    <span asp-validation-for="Employee.Contact" class="text-danger"></span>
                </div>
            </div>
        </div>


        <!-- Experience Info -->
        <div class="mb-3">
            <div class="d-flex justify-content-between align-items-center mb-2">
                <h5 class="mb-0">Experience Info</h5>
                <button type="button" class="btn btn-sm btn-info" data-bs-toggle="modal" data-bs-target="#experienceModal">
                    + Add Experience
                </button>
            </div>

            <div class="table-responsive">
                <table class="table table-sm table-bordered align-middle" id="experienceTable">
                    <thead class="table-light">
                        <tr>
                            <th>Company</th>
                            <th>Department</th>
                            <th>Years</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody id="experienceDetails">
                        <!-- Dynamic rows will be added here -->
                    </tbody>
                </table>
            </div>
        </div>

        <div class="text-end">
            <button type="submit" class="btn btn-sm btn-primary btnsub">Submit</button>
        </div>
    </form>
</div>

<!-- Experience Modal -->
<div class="modal fade" id="experienceModal" tabindex="-1" aria-labelledby="experienceModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="experienceModalLabel">Add Experience</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="form-group mb-2">
                    <label for="experienceCompany">Company</label>
                    <select class="form-control" id="experienceCompany">
                        <option value="CompanyA">Company A</option>
                        <option value="CompanyB">Company B</option>
                        <option value="CompanyC">Company C</option>
                    </select>
                </div>

                <div class="form-group mb-2">
                    <label for="experienceDepartment">Department</label>
                    <select class="form-control" id="experienceDepartment">
                        <option value="IT">IT</option>
                        <option value="DevOps">DevOps</option>
                        <option value="Sales">Sales</option>
                        <option value="Management">Management</option>
                    </select>
                </div>

                <div class="form-group mb-2">
                    <label for="experienceYears">Years</label>
                    <input type="number" class="form-control" id="experienceYears" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="saveExperienceBtn">Save Experience</button>
            </div>
        </div>
    </div>              
</div>

<script>

    function initializemodal() {
        let editingRow = null;
        let experienceCounter = 0;
        let deletedExperiences = [];

        // Populate existing experiences
        const exp = $("#expJson").val();
        const existingExperiences = JSON.parse(exp);
        console.log(existingExperiences);

        $("#experienceDetails").empty();

        if (existingExperiences && existingExperiences.length > 0) {
            $.each(existingExperiences, function(index, experience) {
                const newRow = $('<tr>').attr('data-id', experience.experienceID)
                    .append($('<td>').text(experience.company))
                    .append($('<td>').text(experience.department))
                    .append($('<td>').text(experience.years))
                    .append($('<td>')
                        .append($('<button>').attr({
                            'type': 'button',
                            'class': 'btn btn-sm btn-warning me-1 editExperienceBtn'
                        }).html('<i class="fas fa-edit"></i>'))
                        .append($('<button>').attr({
                            'type': 'button',
                            'class': 'btn btn-sm btn-danger removeExperienceBtn'
                        }).html('<i class="fas fa-trash-alt"></i>'))
                    );
                $("#experienceDetails").append(newRow);
            });
        }

        // Save Experience
        $(document).off("click", "#saveExperienceBtn").on("click", "#saveExperienceBtn", function () {
            const company = $("#experienceCompany").val();
            const department = $("#experienceDepartment").val();
            const years = $("#experienceYears").val();
            const experienceId = editingRow ? $(editingRow).data("id") : null;

            if (editingRow) {
                $(editingRow).find("td:eq(0)").text(company);
                $(editingRow).find("td:eq(1)").text(department);
                $(editingRow).find("td:eq(2)").text(years);
                editingRow = null;
            } else {
                const newRow = $('<tr>').attr('data-id', 'new_' + experienceCounter++)
                    .append($('<td>').text(company))
                    .append($('<td>').text(department))
                    .append($('<td>').text(years))
                    .append($('<td>')
                        .append($('<button>').attr({
                            'type': 'button',
                            'class': 'btn btn-sm btn-warning me-1 editExperienceBtn'
                        }).html('<i class="fas fa-edit"></i>'))
                        .append($('<button>').attr({
                            'type': 'button',
                            'class': 'btn btn-sm btn-danger removeExperienceBtn'
                        }).html('<i class="fas fa-trash-alt"></i>'))
                    );
                $("#experienceDetails").append(newRow);
            }

            // Clear and close modal
            $("#experienceCompany, #experienceDepartment, #experienceYears").val('');
            $("#experienceModal").modal('hide');
        });

        // Remove row
        $(document).off("click", ".removeExperienceBtn").on("click", ".removeExperienceBtn", function () {
            const row = $(this).closest('tr');
            const experienceId = row.data("id");
            if (experienceId && !experienceId.toString().startsWith("new_")) {
                deletedExperiences.push(experienceId);
            }
            row.remove();
        });

        // Edit row
        $(document).off("click", ".editExperienceBtn").on("click", ".editExperienceBtn", function () {
            editingRow = $(this).closest('tr');
            const cells = editingRow.find('td');
            $("#experienceCompany").val(cells.eq(0).text());
            $("#experienceDepartment").val(cells.eq(1).text());
            $("#experienceYears").val(cells.eq(2).text());
            $("#experienceModal").modal('show');
        });

        // Form submission handler
        $(document).off("submit", "#employeeForm").on("submit", "#employeeForm", function (e) {
            e.preventDefault();
            $(".dynamicExperienceInput").remove();

            // Add deleted experiences if any
            if (deletedExperiences.length > 0) {
                $('<input>')
                    .attr({
                        'type': 'hidden',
                        'name': 'DeletedExperienceIds'
                    })
                    .val(deletedExperiences.join(','))
                    .addClass('dynamicExperienceInput')
                    .appendTo(this);
            }

            // Add current experiences
            $("#experienceDetails tr").each(function (index) {
                const row = $(this);
                const experienceId = row.data("id");
                const cells = row.find('td');

                if (cells.length >= 3 && !deletedExperiences.includes(experienceId)) {
                    const fields = [
                        { name: 'Company', value: cells.eq(0).text().trim() },
                        { name: 'Department', value: cells.eq(1).text().trim() },
                        { name: 'Years', value: cells.eq(2).text().trim() }
                    ];

                    $.each(fields, function(i, field) {
                        $('<input>')
                            .attr({
                                'type': 'hidden',
                                'name': `Experiences[${index}].${field.name}`
                            })
                            .val(field.value)
                            .addClass('dynamicExperienceInput')
                            .appendTo('#employeeForm');
                    });

                    if (experienceId && !experienceId.toString().startsWith("new_")) {
                        $('<input>')
                            .attr({
                                'type': 'hidden',
                                'name': `Experiences[${index}].ExperienceID`
                            })
                            .val(experienceId)
                            .addClass('dynamicExperienceInput')
                            .appendTo('#employeeForm');
                    }
                }
            });

            const employeeId = $('#Employee_EmployeeID').val();
            const formData = new FormData(this);
            const Url = employeeId && parseInt(employeeId) > 0
                ? `/Employee/Create/${employeeId}`
                : '/Employee/Create';

            $.ajax({
                type: "POST",
                url: Url,
                data: formData,
                contentType: false,
                processData: false,
                success: function () {
                    alertify.success(`Employee ${employeeId > 0 ? "Updated" : "Added"}`);
                    $('#createEmployeeModal').modal('hide');
                    loadEmployee(() => {
                        dataGrid.option("dataSource", EmployeeList);
                        dataGrid.refresh();
                    });
                },
                error: function (xhr) {
                    console.error("Error:", xhr.responseText);
                    alertify.error("Something went wrong.");
                }
            });
        });
    }


</script> 