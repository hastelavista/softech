@model employee.Models.EmployeeFormViewModel

<div class="container mt-5">
    <h2 class="mb-4">Employee Registration Form</h2>

    <form id="employeeForm" method="post">
        @Html.AntiForgeryToken()

        <input type="hidden" asp-for="Employee.EmployeeID" />

        <!-- Employee Info -->
        <div class="mb-3">
            <h4>Employee Info</h4>

            <div class="form-group mb-2">
                <label asp-for="Employee.Name"></label>
                <input asp-for="Employee.Name" class="form-control" />
                <span asp-validation-for="Employee.Name" class="text-danger"></span>
            </div>

            <div class="form-group mb-2">
                <label asp-for="Employee.Age"></label>
                <input asp-for="Employee.Age" class="form-control" />
                <span asp-validation-for="Employee.Age" class="text-danger"></span>
            </div>

            <div class="form-group mb-2">
                <label asp-for="Employee.Gender"></label>
                <select asp-for="Employee.Gender" class="form-control">
                    <option value="">-- Select Gender --</option>
                    <option value="Male">Male</option>
                    <option value="Female">Female</option>
                    <option value="Other">Other</option>
                </select>
                <span asp-validation-for="Employee.Gender" class="text-danger"></span>
            </div>

            <div class="form-group mb-2">
                <label asp-for="Employee.Contact"></label>
                <input asp-for="Employee.Contact" class="form-control" />
                <span asp-validation-for="Employee.Contact" class="text-danger"></span>
            </div>
        </div>

        <!-- Experience Info -->
        <div class="mb-3">
            <h4>Experience Info</h4>
            <button type="button" class="btn btn-info" data-bs-toggle="modal" data-bs-target="#experienceModal">+ Add Experience</button>

            <table class="table mt-3" id="experienceTable">
                <thead>
                    <tr>
                        <th>Company</th>
                        <th>Department</th>
                        <th>Years of Experience</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody id="experienceDetails">
                  
                </tbody>
            </table>

        </div>

        <button type="submit" class="btn btn-primary">Submit</button>
    </form>
</div>

<!-- Experience Modal -->
<div class="modal fade" id="experienceModal" tabindex="-1" aria-labelledby="experienceModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="experienceModalLabel">Add Experience</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="form-group mb-2">
                    <label for="experienceCompany">Company</label>
                    <select class="form-control" id="experienceCompany">
                        <option value="CompanyA">Company A</option>
                        <option value="CompanyB">Company B</option>
                        <option value="CompanyC">Company C</option>
                    </select>
                </div>

                <div class="form-group mb-2">
                    <label for="experienceDepartment">Department</label>
                    <select class="form-control" id="experienceDepartment">
                        <option value="IT">IT</option>
                        <option value="DevOps">DevOps</option>
                        <option value="Sales">Sales</option>
                        <option value="Management">Management</option>
                    </select>
                </div>

                <div class="form-group mb-2">
                    <label for="experienceYears">Years</label>
                    <input type="number" class="form-control" id="experienceYears" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="saveExperienceBtn">Save Experience</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            let editingRow = null;
            let experienceCounter = 0;
            let deletedExperiences = [];

            // Populate existing experiences
            const existingExperiences = @Html.Raw(Json.Serialize(Model.Experiences));
            if (existingExperiences && existingExperiences.length > 0) {
                $.each(existingExperiences, function(index, experience) {
                    const newRow = $('<tr>').attr('data-id', experience.experienceID)
                        .append($('<td>').text(experience.company))
                        .append($('<td>').text(experience.department))
                        .append($('<td>').text(experience.years))
                        .append($('<td>')
                            .append($('<button>').attr({
                                'type': 'button',
                                'class': 'btn btn-sm btn-warning me-1 editExperienceBtn'
                            }).html('<i class="fas fa-edit"></i>'))
                            .append($('<button>').attr({
                                'type': 'button',
                                'class': 'btn btn-sm btn-danger removeExperienceBtn'
                            }).html('<i class="fas fa-trash-alt"></i>'))
                        );
                    $("#experienceDetails").append(newRow);
                });
            }

            // Save experience handler
            $("#saveExperienceBtn").on('click', function () {
                const company = $("#experienceCompany").val();
                const department = $("#experienceDepartment").val();
                const years = $("#experienceYears").val();
                const experienceId = editingRow ? $(editingRow).data("id") : null;

                if (editingRow) {
                    $(editingRow).find("td:eq(0)").text(company);
                    $(editingRow).find("td:eq(1)").text(department);
                    $(editingRow).find("td:eq(2)").text(years);
                    editingRow = null;
                } else {
                    const newRow = $('<tr>').attr('data-id', 'new_' + experienceCounter++)
                        .append($('<td>').text(company))
                        .append($('<td>').text(department))
                        .append($('<td>').text(years))
                        .append($('<td>')
                            .append($('<button>').attr({
                                'type': 'button',
                                'class': 'btn btn-sm btn-warning me-1 editExperienceBtn'
                            }).html('<i class="fas fa-edit"></i>'))
                            .append($('<button>').attr({
                                'type': 'button',
                                'class': 'btn btn-sm btn-danger removeExperienceBtn'
                            }).html('<i class="fas fa-trash-alt"></i>'))
                        );
                    $("#experienceDetails").append(newRow);
                }

                // Clear and close modal
                $("#experienceCompany, #experienceDepartment, #experienceYears").val('');
                $("#experienceModal").modal('hide');
            });

            // Event delegation for dynamic buttons
            $("#experienceDetails").on('click', '.removeExperienceBtn', function() {
                const row = $(this).closest('tr');
                const experienceId = row.data("id");
                if (experienceId && !experienceId.toString().startsWith("new_")) {
                    deletedExperiences.push(experienceId);
                }
                row.remove();
            });

            $("#experienceDetails").on('click', '.editExperienceBtn', function() {
                editingRow = $(this).closest('tr');
                const cells = editingRow.find('td');

                $("#experienceCompany").val(cells.eq(0).text());
                $("#experienceDepartment").val(cells.eq(1).text());
                $("#experienceYears").val(cells.eq(2).text());

                $("#experienceModal").modal('show');
            });

            // Form submission handler
            $("#employeeForm").on("submit", function () {
                $(".dynamicExperienceInput").remove();

                // Add deleted experiences if any
                if (deletedExperiences.length > 0) {
                    $('<input>')
                        .attr({
                            'type': 'hidden',
                            'name': 'DeletedExperienceIds'
                        })
                        .val(deletedExperiences.join(','))
                        .addClass('dynamicExperienceInput')
                        .appendTo(this);
                }

                // Add current experiences
                $("#experienceDetails tr").each(function (index) {
                    const row = $(this);
                    const experienceId = row.data("id");
                    const cells = row.find('td');

                    if (cells.length >= 3 && !deletedExperiences.includes(experienceId)) {
                        const fields = [
                            { name: 'Company', value: cells.eq(0).text().trim() },
                            { name: 'Department', value: cells.eq(1).text().trim() },
                            { name: 'Years', value: cells.eq(2).text().trim() }
                        ];

                        $.each(fields, function(i, field) {
                            $('<input>')
                                .attr({
                                    'type': 'hidden',
                                    'name': `Experiences[${index}].${field.name}`
                                })
                                .val(field.value)
                                .addClass('dynamicExperienceInput')
                                .appendTo('#employeeForm');
                        });

                        if (experienceId && !experienceId.toString().startsWith("new_")) {
                            $('<input>')
                                .attr({
                                    'type': 'hidden',
                                    'name': `Experiences[${index}].ExperienceID`
                                })
                                .val(experienceId)
                                .addClass('dynamicExperienceInput')
                                .appendTo('#employeeForm');
                        }
                    }
                });
            });
        });
    </script>
}