    @model List<employee.Models.EmployeeFormViewModel>
    @using X.PagedList.Mvc.Core
    @using X.PagedList



<div class ="container">
        <div class="d-flex justify-content-between align-items-center mb-3">
          
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h2 class="mb-0">Employee List</h2>
                </div>

                <div class="d-flex justify-content-between align-items-center mb-3 flex-wrap">

                    <form id="searchForm" class="d-flex align-items-center me-3 mb-2 mb-md-0" method="get" action="/Employee/List">
                        <div class="input-group">
                            <input type="text" id="searchQuery" class="form-control" name="query" placeholder="Search" value="@(ViewContext.HttpContext.Request.Query["query"])" />
                            <button type="submit" class="btn btn-primary">Search</button>
                        </div>
                    </form>

                    <div class="d-flex align-items-center">
                        <a href="#" class="btn btn-outline-success me-2 btnExcel" title="Export to Excel">
                            <i class="fa fa-file-excel fa-sm"></i>
                        </a>

                        <a href="#" class="btn btn-outline-secondary me-2 btnPrint" title="Print Table">
                            <i class="fa fa-print fa-sm"></i>
                        </a>

                        <a href="/Employee/Create" class="btn btn-primary">
                            <i class="fa fa-plus fa-sm"></i>
                        </a>
                    </div>
                </div>

        </div>


        <div class="table-responsive w-100 px-0 mx-0" id="employeeTable">
            <table class="table table-striped table-bordered table-hover align-middle">
                <thead class="table-dark text-nowrap">
                    <tr>
                        <th style="width: 50px;">S.N.</th>
                        <th style="width: 200px;">Name</th>
                        <th style="width: 80px;">Age</th>
                        <th style="width: 100px;">Gender</th>
                        <th style="width: 160px;">Contact</th>
                        <th style="width: 180px;">Department</th>
                        <th style="width: 120px;">Experience Years</th>
                        <th style="width: 100px;"></th>
                    </tr>
                </thead>
                <tbody class="text-nowrap">
                    @{
                        int sn = ((ViewBag.PagedEmployees.PageNumber - 1) * ViewBag.PagedEmployees.PageSize) + 1;
                    }


                    @foreach (var emp in Model)
                    {
                        <tr>
                            <td>@sn</td>
                            <td>
                                <div class="text-truncate" style="max-width: 140px;" title="@emp.Employee.Name">
                                    @emp.Employee.Name
                                </div>
                            </td>
                            <td>@emp.Employee.Age</td>
                            <td>@emp.Employee.Gender</td>
                            <td>
                                <div class="text-truncate" style="max-width: 150px;" title="@emp.Employee.Contact">
                                    @emp.Employee.Contact
                                </div>
                            </td>
                            <td>
                                <div class="text-truncate" style="max-width: 170px;" title="@emp.Experience.Department">
                                    @emp.Experience.Department
                                </div>
                            </td>
                            <td>@(emp.Experience.Years ?? 0)</td>
                            <td>
                                <a href="/Employee/Create/@emp.Employee.EmployeeID" class="btn btn-sm btn-warning me-2">
                                    <i class="fa fa-edit"></i> 
                                </a>
                                <button class="btn btn-sm btn-danger delete-btn" data-id="@emp.Employee.EmployeeID">
                                    <i class="fa fa-trash"></i> 
                                </button>
                            </td>
                        </tr>
                        sn++;
                    }
                </tbody>
            </table>

            @Html.PagedListPager(
                     (IPagedList)ViewBag.PagedEmployees,
                     page => Url.Action("List", new { page, query = ViewBag.Query }),
                     new PagedListRenderOptions
                {
                    DisplayLinkToFirstPage = PagedListDisplayMode.Always,
                    DisplayLinkToLastPage = PagedListDisplayMode.Always,
                    DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
                    DisplayLinkToNextPage = PagedListDisplayMode.Always,
                    DisplayEllipsesWhenNotShowingAllPageNumbers = true,
                    MaximumPageNumbersToDisplay = 5,
                    ContainerDivClasses = new[] { "pagination", "justify-content-center", "mt-3" },
                    UlElementClasses = new[] { "pagination" },
                    PageClasses = new[] { "page-link" }
                }
                 )


        </div>

    </div>

@section Scripts {
    <script>
        $(document).ready(function () {

            var dt = $ (".table").DataTable({
                "paging": false,
                "lengthchange": true,
                "searching": false,
                "aaSorting": [],
                "info" : false,
                "autoWidth" : false,
                "responsive": false,
            });
          
            
            $('.delete-btn').click(function () {
           
                var employeeId = $(this).data('id');

                alertify.confirm("Confirm Deletion", "Are you sure you want to delete this employee?",
                    function () {
                        $.ajax({
                            url: '/Employee/Delete/' + employeeId,
                            type: 'POST',
                            headers: {
                                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() || ''
                            },
                            success: function () {
                                alertify.success("Employee deleted successfully.");
                                setTimeout(function () {
                                    location.reload();
                                }, 1000);
                            },
                            error: function () {
                                alertify.error("Failed to delete employee.");
                            }
                        });
                    },
                    function () {
                        alertify.message('Canceled');
                    });
            });


            $('.btnPrint').off('click').on('click', function (e) {
            e.preventDefault();

                $('.table').printThis({
                    debug: false,
                    importCSS: false,
                    importStyle: true,
                    printContainer: true,
                    loadCSS: "/css/print.css",
                    pageTitle: "",
                    removeInline: false,
                    formValues: true,
                    beforePrint: function () {
                        dt.columns($('thead tr th').length - 1).visible(false);
                    },
                    afterPrint: function () {
                        dt.columns($('thead tr th').length).visible(true);
                    }
                });

            });

          $('.btnExcel').off('click').on('click', function (e) {
            e.preventDefault();

            alertify.confirm('Download Excel', 'Do you want to download the Employee List as an Excel file?',
                function () {
                    // If the user clicks "OK"
                    let table = document.querySelector(".table");
                    let wb = XLSX.utils.table_to_book(table, { sheet: "Employees" });
                    XLSX.writeFile(wb, "Employee_List.xlsx");
                },
                function () {
                    // If the user clicks "Cancel"
                    alertify.message('Download canceled.');
                }
            );
        });
        
        });
    </script>
}
